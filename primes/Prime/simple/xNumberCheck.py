import sympy
import random
import time
import os

# Constantes globales
no_mutation_streak = 0  # Compteur de nombres sans mutation trouvÃ©e
longest_streak = 0  # Plus grande sÃ©quence sans mutation premiÃ¨re
total_iterations = 0  # Compteur total des nombres testÃ©s


# Fonction pour gÃ©nÃ©rer un nombre premier alÃ©atoire en binaire
def generate_random_prime(bits=2084):
    while True:
        candidate = int.from_bytes(os.urandom(bits // 8), "big")  # Vrai alÃ©atoire
        candidate |= (1 << (bits - 1))  # ğŸ”¥ Force le bit de poids fort Ã  1
        if sympy.isprime(candidate):
            return candidate


def HasPrimeMutation(hex_prime):
    """Teste toutes les mutations d'un nombre hexadÃ©cimal et retourne une liste de mutations premiÃ¨res."""
    global no_mutation_streak, longest_streak
    hex_digits = "0123456789ABCDEF"
    casino_prime = hex(hex_prime)[2:].upper()
    found_mutation = False  # âœ… Variable pour suivre si on a trouvÃ© au moins UNE mutation premiÃ¨re

    for index in range(len(casino_prime)):
        original_digit = casino_prime[-(index + 1)]
        for new_digit in hex_digits.replace(original_digit, ""):
            mutated = list(casino_prime)
            mutated[-(index + 1)] = new_digit
            mutated_hex = "".join(mutated)
            mutated_int = int(mutated_hex, 16)

            # VÃ©rification de primalitÃ©
            if sympy.isprime(mutated_int):
                no_mutation_streak = 0
                return True  # â›” ArrÃªt immÃ©diat pour ce nombre (pas besoin de continuer)

            no_mutation_streak += 1
            # ğŸ”¥ On incrÃ©mente SEULEMENT si AUCUNE mutation n'a Ã©tÃ© trouvÃ©e
            if no_mutation_streak > longest_streak:
                longest_streak = no_mutation_streak

    return False


if __name__ == "__main__":
    # ğŸ”„ Boucle principale
    start_time = time.time()
    while True:
        total_iterations += 1
        prime_candidate = generate_random_prime()
        if (total_iterations % 10) == 0:
            print(f"ğŸŸ¢ {int(total_iterations)} nombres testÃ©s - Longest streak: {longest_streak}")

        result = HasPrimeMutation(prime_candidate)
        if not result:
            end_time = time.time()
            print(f"ğŸ”¥ Nombre trouvÃ© aprÃ¨s {total_iterations} tentatives en {end_time - start_time}.\n Monstre : {hex(prime_candidate)}")
            break

